import { sanitize } from 'dompurify';

export const studlyCase = (str: string): string => {
  const string = str.replace('_', ' ').replace('-', ' ');
  const r = new RegExp(/(?:^\w|[A-Z]|\b\w|\s+)/g);
  const n = string.replace(r, (x, y) => {
    if (+ x === 0) {
      return '';
    }

    const z = y === 0 ? x.toUpperCase() : x.toUpperCase();

    return z;
  });

  return n;
};

export const slugCase = (str: string): string => str
  .replace(/([a-z])([A-Z])/g, '$1-$2')
  .replace(/[\s_]+/g, '-')
  .toLowerCase();

/**
 * Uppercase the first character of each word in a string.
 *
 * @example the quick fox => The Quick Fox
 *
 * @param str
 */
export const ucwords = (str: string): string => str.replace(/^(.)|\s+(.)/g, ($1) => $1.toUpperCase());

/**
 * Uppercase the first character of a string.
 *
 * @example the quick fox => The quick fox
 *
 * @param str
 */
export const ucstring = (str: string): string => `${str.charAt(0).toUpperCase()}${str.slice(1)}`;

/**
 * The limit function truncates the given string at the specified length.
 *
 * @example This is a very long text => This is a very...
 *
 * @param value
 * @param maxLength
 * @param append
 */
export const limit = (value: string, maxLength: number, append = '...'): string => {
  if (value.length < maxLength) {
    return value;
  }
  const val = value.substr(0, maxLength - append.length);
  if (val.lastIndexOf(' ') < Math.ceil(maxLength * 0.75)) {
    return `${val}${append}`;
  }
  return `${val.substr(0, val.lastIndexOf(' '))}${append}`;
};

/**
 * Strip whitespace (or other characters) from the beginning and end of a string
 *
 * @example
 *
 * @param {string} char
 * @param {string} value
 */
export const trim = (charlist: string, str: string): string => {
  let whitespace = [
    ' ',
    '\n',
    '\r',
    '\t',
    '\f',
    '\x0b',
    '\xa0',
    '\u2000',
    '\u2001',
    '\u2002',
    '\u2003',
    '\u2004',
    '\u2005',
    '\u2006',
    '\u2007',
    '\u2008',
    '\u2009',
    '\u200a',
    '\u200b',
    '\u2028',
    '\u2029',
    '\u3000',
  ].join('');
  let l = 0;
  let i = 0;
  str += '';

  if (charlist) {
    whitespace = (`${charlist}`).replace(/([[\]().?/*{}+$^:])/g, '$1');
  }

  l = str.length;
  for (i = 0; i < l; i += 1) {
    if (whitespace.indexOf(str.charAt(i)) === - 1) {
      str = str.substring(i);
      break;
    }
  }

  l = str.length;
  for (i = l - 1; i >= 0; i -= 1) {
    if (whitespace.indexOf(str.charAt(i)) === - 1) {
      str = str.substring(0, i + 1);
      break;
    }
  }

  return whitespace.indexOf(str.charAt(0)) === - 1 ? str : '';
};

/**
 * Provide a way to generate a string guaranteed to be unique when compared
 * to other strings generated by this function.
 *
 * Make the string complex enough that it is highly unlikely to be
 * accidentally duplicated by hand (this is key if you're using `ID`
 * as a private/protected name on an object).
 *
 */
export const id = (): string => `_${Math.random().toString(36).substr(2, 9)}`;

/**
 * Sanitizes a string for use in v-html (innerHTML) bindings
 *
 * @param {string} value
 * @param {boolean} allowHtml defines is HTML is allowed in the string, default to true
 */
export const sanitizeString = (value: string, allowHtml = true): string => sanitize(
  value,
  { USE_PROFILES: { html: allowHtml } },
);

/**
 * Concatenate a string by a amount of characters
 *
 * @param {string} value
 * @param {number} characters defines when the string should be sliced (default 100)
 */
export const concatenate = (value: string, characters = 100): string => {
  if (value.length >= characters) {
    return `${value.slice(0, characters)}...`;
  }
  return value;
};
